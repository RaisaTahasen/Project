from tensorflow import keras
import tensorflow as tf
from keras.models import Sequential

import tensorflow as tf
print(tf.__version__)  # TensorFlow version

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/IMDB Dataset.csv'
data = pd.read_csv(file_path)

# Display the first few rows
print(data.head())


from sklearn.feature_extraction.text import CountVectorizer

# Initialize CountVectorizer
vectorizer = CountVectorizer()

# Convert reviews to bag-of-words representation
X = vectorizer.fit_transform(data['review'])

# Check the shape of the resulting matrix
print(X.shape)


from sklearn.model_selection import train_test_split

# Define features (X) and target (y)
y = data['sentiment']  # Assuming sentiment is the target column

# Split data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

# Train logistic regression
logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)

# Evaluate the model
logistic_accuracy = logistic_model.score(X_test, y_test)
print(f"Logistic Regression Accuracy: {logistic_accuracy}")

logistic_model = LogisticRegression(max_iter=200)  # Increase max_iter to 200 or more
logistic_model.fit(X_train, y_train)
logistic_accuracy = logistic_model.score(X_test, y_test)
print(f"Logistic Regression Accuracy: {logistic_accuracy}")

from sklearn.naive_bayes import MultinomialNB

# Train Naive Bayes
nb_model = MultinomialNB()
nb_model.fit(X_train, y_train)

# Evaluate the model
nb_accuracy = nb_model.score(X_test, y_test)
print(f"Naive Bayes Accuracy: {nb_accuracy}")


import matplotlib.pyplot as plt

# Accuracies
models = ['Logistic Regression', 'Naive Bayes']
accuracies = [logistic_accuracy, nb_accuracy]

# Plot
plt.bar(models, accuracies, color=['blue', 'green'])
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.xlabel("Models")
plt.ylim(0, 1)
plt.show()




